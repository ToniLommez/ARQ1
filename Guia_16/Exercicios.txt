Marcos Antonio Lommez Candido Ribeiro - 771157
Guia 16
20/11/2022

========================= EX 01 =========================

01.) Implementar um programa para o processador 8085 para
calcular o produto (IMUL) de dois dados
com 8 bits cada.
DICA: Usar somas sucessivas.
dado03 = dado01 * dado02

START:	JMP MAIN	// Jump to Main

MUL:	POP H		// Salvar endereco em H,L
	POP D		// Salvar variaveis em D,E
	MVI A,00	// Limpar A
	CMP E		// testa se E == 0
	JZ MULR	// Multiplicacao por 0

LOOP:	ADD D		// Somar D
	DCR E		// E = E-1
	JNZ LOOP	// Volta se E == 0

MULR:	PUSH H		// Endereco de retorno
	RET		// Retornar

MAIN:	LXI H,0050	// Apontar para 0050
	MOV B,M	// Salvar M em B
	INX H		// Pular proximo (0051)
	MOV C,M	// Salvar M em C
	PUSH B		// Salvar B,C no STACK
	CALL MUL	// Pular para MUL
	STA 0100	// Salvar em 0100
	HLT		// Halt

-------- ENTRADA -------
0050 05
0051 04

------- RESULTADO ------
0050 05
0051 04
0100 14 <- resultado


========================= EX 02 =========================

02.) Implementar um programa para o processador 8085 para
calcular o quociente inteiro (IDIV) entre dois dados 
com 8 bits cada.
DICA: Usar subtrações sucessivas.
dado03 = dado01 / dado02

START:	JMP MAIN	// Start

ERRO:	MVI A,01	// Erro do tipo 1
	STA 0200	// Salvando Erro
	HLT		// Halt

DIV:	POP H		// Salvar endereco em H,L
	POP D		// Salvar variaveis em D,E
	MVI A,00	// Limpar A
	CMP E		// testa se Divisor == 0
	JZ ERRO	// Division by 0 erro!
	MOV A,D	// A sera o dividendo/resto
	MVI D,00	// D sera o resultado

LOOP:	SUB E		// A = A-E
	JC DIVR	// Se A < 0 BREAK
	INR D		// D = D+1
	JNC LOOP	// Se A > 0 LOOP

DIVR:	MOV A,D	// A = Numero de iteracoes
	PUSH H		// Endereco de retorno
	RET		// Retornar

MAIN:	LXI H,0050	// Apontar para 0050
	MOV B,M	// Salvar M em B
	INX H		// Pular proximo (0051)
	MOV C,M	// Salvar M em C
	PUSH B		// Salvar B,C no STACK
	CALL DIV	// Pular para DIV
	STA 0100	// Salvar em 0100
	HLT		// Halt

-------- ENTRADA -------
0050 08
0051 03

------- RESULTADO ------
0050 08
0051 03
0100 02 <- resultado


========================= EX 03 =========================

03.) Implementar um programa para o processador 8085 para
calcular o resto inteiro (IMOD) da divisão entre dois dados
com 8 bits cada.
DICA: Usar subtrações sucessivas.
dado03 = dado01 % dado02

START:	JMP MAIN	// Start

ERRO:	MVI A,01	// Erro do tipo 1
	STA 0200	// Salvando Erro
	HLT		// Halt

MOD:	POP H		// Salvar endereco em H,L
	POP D		// Salvar variaveis em D,E
	MVI A,00	// Limpar A
	CMP E		// testa se Divisor == 0
	JZ ERRO	// Division by 0 erro!
	MOV A,D	// A sera o dividendo/resto

LOOP:	SUB E		// A = A-E
	JNC LOOP	// Se A > 0 LOOP

MODR:	ADD E		// Recuperar Modulo
	PUSH H		// Endereco de retorno
	RET		// Retornar

MAIN:	LXI H,0050	// Apontar para 0050
	MOV B,M	// Salvar M em B
	INX H		// Pular proximo (0051)
	MOV C,M	// Salvar M em C
	PUSH B		// Salvar B,C no STACK
	CALL MOD	// Pular para MOD
	STA 0100	// Salvar em 0100
	HLT		// Halt

-------- ENTRADA -------
0050 08
0051 03

------- RESULTADO ------
0050 08
0051 03
0100 02 <- resultado

========================= EX 04 =========================

04.) Implementar um programa para o processador 8085 para
encontrar o maior valor de um arranjo.
DICA: Usar o exemplo do BubbleSort.

START:	JMP MAIN	// Start!

W:	MVI D,05	// BUBBLE SORT!

X:	LXI H,0050	// Comecar em 0050
	MVI C,05

Y:	MOV A,M
	INX H
	MOV B,M
	CMP B
	JM Z
	MOV M,A
	DCX H
	MOV M,B
	INX H

Z:	DCR C
	JNZ Y
	DCR D
	JNZ X
	RET		// Retornar

MAIN:	CALL W		// Ordenar 0050 ate 0055
	LXI H,0055	// Maior valor
	MOV A,M	// Enviar para a memoria
	STA 0100	// Salvo em 100
	HLT		// Halt

-------- ENTRADA -------
0050 09
0051 08
0052 07
0053 06
0054 05
0055 04

------- RESULTADO ------
0050 04
0051 05
0052 06
0053 07
0054 08
0055 09
0100 09 <-resultado

========================= EX 05 =========================

05.) Implementar um programa para o processador 8085 para
converter um valor em BCD (Binary Coded Decimal)
para o hexadecimal equivalente.
DICA: 24 (BCD) = 24 (10) = HI (24) * 10 + LOW (24) = 2 * 10 + 4 
 = 0000 0010(2) * 0000 1010(2) + 0000 0100(2) = 0001 0100(2) + 0001 1000(2) = 18 (16)
dado02 = HI (dado01) * 10 + LOW (dado02)

START:	JMP MAIN	// Jump to Main

DTOH:	POP H		// Salvar endereco em H,L
	POP D		// Salvar variaveis em D,E
	MOV A,D	// Primeiro digito a direita
	ANI 0F		// Mascara para decimal
	MOV E,A	// L = decimal a direita
	MOV A,D	// Agora digito a esquerda
	ANI F0		// Mascara para decimal
	RAR
	RAR
	RAR
	RAR
	MOV D,A	// Guardar em D
	MVI B,09	// Contador comecando em 10

LOOP:	ADD D		// Somar E
	DCR B		// B = B - 1
	JNZ LOOP	// Volta se B == 0
	ADD E		// Adicionar restante
	PUSH H		// Endereco de retorno
	RET		// Retornar

MAIN:	LXI H,0050	// Recuperar BCD
	MOV B,M	// Salvar M em B
	PUSH B		// Salvar B no STACK
	CALL DTOH	// Decimal para Hexadecimal
	STA 0100	// Salvar em 0100
	HLT		// Halt

-------- ENTRADA -------
0050 24 

------- RESULTADO ------
0050 24
0100 18 <- resultado

========================= EX 06 =========================

06.) Implementar um programa para o processador 8085 para
calcular o quadrado de um dado de 8 bits.
DICA: Somar os ímpares: 52 = 1+3+5+7+9 = 25.
dado02 = SQR (dado01)

START:	JMP MAIN	// Jump to Main

SQR:	POP H		// Salvar endereco em H,L
	POP D		// Salvar variaveis em D,E
	MVI A,00	// Limpar A
	CMP E		// testa se E == 0
	JZ SQRR	// Multiplicacao por 0

LOOP:	ADD D		// Somar D
	DCR E		// E = E-1
	JNZ LOOP	// Volta se E == 0

SQRR:	PUSH H		// Endereco de retorno
	RET		// Retornar

MAIN:	LXI H,0050	// Apontar para 0050
	MOV B,M	// Salvar M em B
	MOV C,M	// Salvar M em C
	PUSH B		// Salvar B,C no STACK
	CALL SQR	// Pular para SQR
	STA 0100	// Salvar em 0100
	HLT		// Halt

-------- ENTRADA -------
0050 05

------- RESULTADO ------
0050 05
0100 19 <- resultado

========================= EX 07 =========================

07.) Implementar um programa para o processador 8085 para
calcular o fatorial de um dado de 8 bits.
dado02 = FAT (dado01)

START:	JMP MAIN	// Jump to Main

FATM:	POP H		// Salvar endereco em H,L
	POP D		// Salvar variaveis em D,E
	MVI A,00	// Limpar A
LOOP1:	ADD D		// Somar D
	DCR E		// E = E-1
	JNZ LOOP1	// Volta se E == 0
FATMR:	MOV E,D	// Duplicar D para E
	PUSH H		// Endereco de retorno
	RET		// Retornar

FAT:	POP H		// Salvar endereco em H,L
	POP B		// Salvar variaveis em B,C
	PUSH H		// Salvando endereco
	DCR C		// C = C - 1
LOOP2:	PUSH B		// Empilhar B,C
	CALL FATM	// Chamar Fatorial Mul
	MOV B,A	// Salvar A em B
	DCR C		// C = C - 1
	JNZ LOOP2	// LOOP se C != 0
	RET

MAIN:	LXI H,0050	// Apontar para 0050
	MOV B,M	// Salvar M em B
	MOV C,M	// Salvar M em C
	PUSH B		// Salvar B,C no STACK
	CALL FAT	// Pular para FAT
	STA 0100	// Salvar em 0100
	HLT		// Halt

-------- ENTRADA -------
0050 05

------- RESULTADO ------
0050 05
0100 78 <-resultado
